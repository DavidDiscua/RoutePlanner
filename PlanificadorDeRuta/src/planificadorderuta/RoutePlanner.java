/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package planificadorderuta;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.geom.Point2D;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Set;
import java.util.TreeSet;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.jgrapht.graph.WeightedMultigraph;

/**
 *
 * @author DDiscua
 */
public class RoutePlanner extends javax.swing.JFrame {

    /**
     * Creates new form RoutePlanner
     */
    public RoutePlanner() {
        initComponents();
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        FilePath = "";

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Route Planner");
        setMaximumSize(new java.awt.Dimension(617, 338));
        setMinimumSize(new java.awt.Dimension(617, 338));
        setPreferredSize(new java.awt.Dimension(617, 338));
        getContentPane().setLayout(null);
        getContentPane().add(jSeparator1);
        jSeparator1.setBounds(0, 100, 620, 40);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Route Planner");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(220, 20, 180, 60);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel2.setText("Planning Route : ");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(150, 230, 130, 30);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel3.setText("Select input File : ");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(150, 150, 130, 30);

        jButton1.setText("Run");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(330, 230, 110, 30);

        jButton2.setText("Open");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(330, 150, 110, 30);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (!FilePath.equalsIgnoreCase("")) {
            LoadAll();
        } else {

            JOptionPane.showMessageDialog(this, "Aún no ha seleccionado un archivo");
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("TEXT FILES", "txt", "text");
        chooser.setFileFilter(filter);
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            FilePath = chooser.getSelectedFile().getAbsolutePath();
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RoutePlanner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RoutePlanner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RoutePlanner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RoutePlanner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RoutePlanner().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
    private static ArrayList<String> Points;
    private static int TrucksNumber;
    private static City Origin;
    private static int EachTruck;
    private static double Residuo;
    private static ArrayList<Truck> Trucks;//Control del número de camiones
    private static ArrayList<String> Distances;
    private static WeightedMultigraph<City, Distance> Map;
    private static ArrayList<Distance> DISTANCIAS;
    private static String FilePath;

    public static void LoadAll() {
        TrucksNumber = 0;//Número de camiones
        Points = new ArrayList();//La Lista de puntos para calcular distancia Geodesica 
        Map = new WeightedMultigraph<City, Distance>(Distance.class);;//El grafo que moldea las ciudades
        Distances = new ArrayList();
        //Setting Up
        Points = LoadPoints(Points);
        EachTruck = Points.size() / TrucksNumber;
        Residuo = (Points.size() % TrucksNumber);
        Trucks = new ArrayList();
        DISTANCIAS = new ArrayList();
        System.out.println("Numbers Of Trucks: " + TrucksNumber);
        System.out.println("Each Truck: " + EachTruck);
        System.out.println("Residuo : " + Residuo);
        BuildGrah();
        setRutes();
        DrawGraph();
    }

    private static void BuildGrah() {

        String SplitCity[] = null;
        City CityTemp = null;
        for (int i = 0; i < Points.size(); i++) {
            SplitCity = Points.get(i).split(",");
            CityTemp = new City(Integer.parseInt(SplitCity[0]), Integer.parseInt(SplitCity[1]), (i + 1));
            Map.addVertex(CityTemp);
            if (i == 0) {
                Origin = CityTemp;
            }
        }
        //Set up Vertex
        Object[] Vertices = Map.vertexSet().toArray();
        for (int i = 0; i < Vertices.length; i++) {

            for (int j = 0; j < Vertices.length; j++) {
                // control++;
                double distance = (CalculateDistance(((City) Vertices[i]).getCoordenateInX(), ((City) Vertices[i]).getCoordenateInY(), ((City) Vertices[j]).getCoordenateInX(), ((City) Vertices[j]).getCoordenateInY()));
                Distance D = new Distance(distance);
                String CityOne = ((City) Vertices[i]).toString();
                String CityTwo = ((City) Vertices[j]).toString();
                if (!CityOne.equalsIgnoreCase(CityTwo)) {
                    Map.addEdge(((City) Vertices[i]), ((City) Vertices[j]), D);
                    DISTANCIAS.add(D);

                }
            }
        }
        System.out.println("Nodes Count :" + Map.vertexSet().size());
    }

    private static double CalculateDistance(double PointA_X, double PointA_Y, double PointB_X, double PointB_Y) {

        return Point2D.distance(PointA_X, PointA_Y, PointB_X, PointB_Y);
    }

    private static ArrayList<String> LoadPoints(ArrayList<String> Points) {

        boolean getTrucksNumber = false;
        try (BufferedReader br = new BufferedReader(new FileReader(FilePath))) {

            String sCurrentLine;

            while ((sCurrentLine = br.readLine()) != null) {
                //  System.out.println(sCurrentLine);
                if (getTrucksNumber == false) {
                    TrucksNumber = Integer.parseInt(sCurrentLine);
                    getTrucksNumber = true;
                } else {

                    Points.add(sCurrentLine);
                }
            }

        } catch (IOException e) {
            e.printStackTrace();
        }

        return Points;
    }

    private static void setRutes() {

        //Sort Distance per node and then take Numbers of truck Nodes.
        //TrucksNumber;
        //Residuo;
        //Trucks;
        City CurrentNode = null;
        Set<Distance> Aristas = null;
        TreeSet SorterEdges = new TreeSet();
        Object[] Vertices = Map.vertexSet().toArray();
        Truck TruckTemp = null;
        int CitiesCount = 0;
        int couterMark = 0;
        int couterMark2 = 0;
        for (int i = 0; i < Vertices.length; i++) {
            CurrentNode = (City) Vertices[i];
            if (!CurrentNode.isMarcked()) {
                couterMark++;
                CurrentNode.setMarcked(true);
                Aristas = Map.edgesOf(CurrentNode);//Get all Edges from that node
                //sort
                SorterEdges = setTree(Aristas);//in a Tree
                TruckTemp = new Truck();
                City TargetCity = null;
                CitiesCount = 0;
                for (Object obj : SorterEdges) {

                    Distance D = SearchInstance(obj);
                    TargetCity = (City) Map.getEdgeTarget(D);

                    if (!TargetCity.isMarcked()) {
                        // System.out.println("Target City:" + TargetCity);
                        TruckTemp.setCities(TargetCity);
                        TruckTemp.setDistance((double) obj);
                        TargetCity.setMarcked(true);
                        //  System.out.println("Ciudades: " + TruckTemp.getCities().size());
                        CitiesCount++;
                        if (CitiesCount == (EachTruck + Residuo)) {
                            Residuo = 0;
                            break;
                        }

                    } else {
                        // System.out.println("CITY VISITADA: " + TargetCity.toString());
                        //  System.out.println("Target City Visitada");
                    }
                }
                if (!TruckTemp.getCities().isEmpty()) {
                    TruckTemp.setDistance(getPartialDistance(TruckTemp.getCities()));
                    Trucks.add(TruckTemp);
                }
            } else {
                //System.out.println("El nodo ya está marcado");
                couterMark2++;

            }
        }
        System.out.println("Marcados : " + couterMark2);
        System.out.println("No estaba marcados: " + couterMark);

        FindIndex(Trucks);
    }

    private static void FindIndex(ArrayList<Truck> Trucks) {
        ArrayList<String> Formato = new ArrayList();
        ArrayList<String> Formato2 = new ArrayList();
        City TargetCity = null;
        ArrayList<City> cities = new ArrayList();
        for (int i = 0; i < Trucks.size(); i++) {
            cities = Trucks.get(i).getCities();
            Formato.add(Integer.toString(cities.size()));
            for (int j = 0; j < cities.size(); j++) {
                String cor = (int) cities.get(j).getCoordenateInX() + "," + (int) cities.get(j).getCoordenateInY();
                for (int k = 0; k < Points.size(); k++) {
                    if (Points.get(k).equalsIgnoreCase(cor)) {
                        Formato.add(Integer.toString(k));
                    }
                }
            }
        }
        for (int i = 0; i < Trucks.size(); i++) {

            Formato2.add("Route " + i + ": " + Trucks.get(i).getDistance());
        }
        SaveFile(Formato, "salida");
        SaveFile(Formato2, "calculos");
    }

    private static void SaveFile(ArrayList<String> Lista, String name) {
        Writer writer = null;

        try {
            writer = new BufferedWriter(new OutputStreamWriter(
                    new FileOutputStream(name + ".txt"), "utf-8"));

            for (int i = 0; i < Lista.size(); i++) {
                writer.write((String) Lista.get(i) + "\n");
            }
            writer.close();

        } catch (IOException ex) {
            // report
        } finally {
            try {
                writer.close();
            } catch (Exception ex) {/*ignore*/
            }
        }

    }

    private static void DrawGraph() {

        JFrame frame = new PaintExampleFrame(Trucks, Origin);
        frame.setLocationRelativeTo(null);
        frame.setResizable(true);
        frame.setLocationRelativeTo(null);
        frame.setSize(800, 800);
        frame.setResizable(false);
        frame.setMinimumSize(new Dimension(800, 800));
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }

    private static boolean sameChars(String firstStr, String secondStr) {
        char[] first = firstStr.toCharArray();
        char[] second = secondStr.toCharArray();
        Arrays.sort(first);
        Arrays.sort(second);
        return Arrays.equals(first, second);
    }

    public static TreeSet setTree(Set<Distance> Aristas) {
        TreeSet SorterEdges = new TreeSet();
        for (Object obj : Aristas) {
            SorterEdges.add(new Double(obj.toString()));
        }
        return SorterEdges;
    }

    public static Distance SearchInstance(Object obj) {

        for (int j = 0; j < DISTANCIAS.size(); j++) {
            if (obj.toString().equalsIgnoreCase(DISTANCIAS.get(j).toString())) {
                return DISTANCIAS.get(j);

            }
        }
        return null;
    }

    public static double getPartialDistance(ArrayList<City> Cities) {
        double PartialDistance = 0.0;
        Distance distance = null;
        for (int i = 0; i < Cities.size(); i++) {

            if ((i + 1) < Cities.size()) {

                if (!Cities.get(i).toString().equalsIgnoreCase(Cities.get(i + 1).toString())) {
                    distance = Map.getEdge(Cities.get(i), Cities.get(i + 1));//Obtener la distancia entre una ciudad y la otra
                    PartialDistance += distance.getDistance();
                }

            } else//Ultima Ciudad
             if (!Cities.get(i).toString().equalsIgnoreCase(Origin.toString())) {
                    distance = Map.getEdge(Cities.get(i), Origin);
                    PartialDistance += distance.getDistance();
                }

        }

        return PartialDistance;
    }

    //DrawThing
    static class PaintExampleFrame extends JFrame {

        ArrayList<Truck> Trucks;
        City Origin;
        int WIDTH;
        int HEIGHT;
        PlanificadorDeRuta PRuta;

        public PaintExampleFrame(ArrayList<Truck> Trucks, City Origin) {
            this.PRuta = PRuta;
            this.Origin = Origin;
            this.Trucks = Trucks;
            WIDTH = 10;
            HEIGHT = 10;

            setTitle("Route Graph");
            setSize(800, 800);
            setLocation(new Point((int) Origin.getCoordenateInX(), (int) Origin.getCoordenateInY()));
            setVisible(true);
            setBackground(Color.white);

        }

        @Override
        public void paint(Graphics g) {
            int centerX = 20, centerY = 20,center=0;
            Color color = null;
            
             g.setColor(Color.BLACK);
             g.fillOval(centerX + (int) Origin.getCoordenateInX(), centerY + (int) Origin.getCoordenateInY(), WIDTH+10, HEIGHT+10);
            for (int i = 0; i < Trucks.size(); i++) {
                Truck truck = Trucks.get(i);
                color = new Color((int) (Math.random() * 0x1000000));
                for (int j = 0; j < truck.getCities().size(); j++) {
                    City city = truck.getCities().get(j);
                    System.out.println(Origin);
                    System.out.println(city);
                    g.setColor(color);
                    
                    g.fillOval(center+centerX + (int) city.getCoordenateInX(),center+ centerY + (int) city.getCoordenateInY(), WIDTH, HEIGHT);
                   // centerX += 10;

                }
                centerY += 80;
            }

        }

    }

}
